{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\", \"accessibilityLabel\", \"disabled\", \"labelVariant\", \"labelMaxFontSizeMultiplier\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport Checkbox from \"./Checkbox\";\nimport CheckboxAndroid from \"./CheckboxAndroid\";\nimport CheckboxIOS from \"./CheckboxIOS\";\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n    status = _ref.status,\n    label = _ref.label,\n    onPress = _ref.onPress,\n    labelStyle = _ref.labelStyle,\n    themeOverrides = _ref.theme,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    disabled = _ref.disabled,\n    _ref$labelVariant = _ref.labelVariant,\n    labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant,\n    _ref$labelMaxFontSize = _ref.labelMaxFontSizeMultiplier,\n    labelMaxFontSizeMultiplier = _ref$labelMaxFontSize === void 0 ? 1.5 : _ref$labelMaxFontSize,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme,\n    disabled: disabled\n  });\n  var isLeading = position === 'leading';\n  var checkbox;\n  if (mode === 'android') {\n    checkbox = React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = React.createElement(Checkbox, checkboxProps);\n  }\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(TouchableRipple, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled: disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled,\n    theme: theme\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(Text, {\n    variant: labelVariant,\n    testID: testID + \"-text\",\n    maxFontSizeMultiplier: labelMaxFontSizeMultiplier,\n    style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n  }, label), !isLeading && checkbox));\n};\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default CheckboxItem;\nexport { CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"names":["React","StyleSheet","View","useInternalTheme","TouchableRipple","Text","Checkbox","CheckboxAndroid","CheckboxIOS","CheckboxItem","_ref","style","status","label","onPress","labelStyle","themeOverrides","theme","testID","mode","_ref$position","position","_ref$accessibilityLab","accessibilityLabel","disabled","_ref$labelVariant","labelVariant","_ref$labelMaxFontSize","labelMaxFontSizeMultiplier","props","_objectWithoutProperties","_excluded","checkboxProps","_objectSpread","isLeading","checkbox","createElement","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","color","accessibilityRole","accessibilityState","checked","styles","container","pointerEvents","importantForAccessibility","variant","maxFontSizeMultiplier","font","displayName","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["D:\\software_studio\\final project\\beprod\\BeProductive\\node_modules\\react-native-paper\\src\\components\\Checkbox\\CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a title font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme: themeOverrides,\n  testID,\n  mode,\n  position = 'trailing',\n  accessibilityLabel = label,\n  disabled,\n  labelVariant = 'bodyLarge',\n  labelMaxFontSizeMultiplier = 1.5,\n  ...props\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n      theme={theme}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          variant={labelVariant}\n          testID={`${testID}-text`}\n          maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n          style={[\n            styles.label,\n            !theme.isV3 && styles.font,\n            computedStyle,\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default CheckboxItem;\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}