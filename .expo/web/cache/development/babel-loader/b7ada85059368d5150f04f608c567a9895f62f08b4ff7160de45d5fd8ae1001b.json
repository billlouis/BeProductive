{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"size\", \"style\", \"labelStyle\", \"color\", \"theme\"],\n  _excluded2 = [\"backgroundColor\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport getContrastingColor from \"../../utils/getContrastingColor\";\nimport Text from \"../Typography/Text\";\nvar defaultSize = 64;\nvar AvatarText = function AvatarText(_ref) {\n  var _theme$colors;\n  var label = _ref.label,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? defaultSize : _ref$size,\n    style = _ref.style,\n    labelStyle = _ref.labelStyle,\n    customColor = _ref.color,\n    themeOverrides = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary : _ref2$backgroundColor,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  var textColor = customColor != null ? customColor : getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  var _useWindowDimensions = useWindowDimensions(),\n    fontScale = _useWindowDimensions.fontScale;\n  return React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(Text, {\n    style: [styles.text, {\n      color: textColor,\n      fontSize: size / 2,\n      lineHeight: size / fontScale\n    }, labelStyle],\n    numberOfLines: 1\n  }, label));\n};\nAvatarText.displayName = 'Avatar.Text';\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default AvatarText;","map":{"version":3,"names":["React","StyleSheet","useWindowDimensions","View","useInternalTheme","white","getContrastingColor","Text","defaultSize","AvatarText","_ref","_theme$colors","label","_ref$size","size","style","labelStyle","customColor","color","themeOverrides","theme","rest","_objectWithoutProperties","_excluded","_ref2","flatten","_ref2$backgroundColor","backgroundColor","colors","primary","restStyle","_excluded2","textColor","_useWindowDimensions","fontScale","createElement","_extends","width","height","borderRadius","styles","container","text","fontSize","lineHeight","numberOfLines","displayName","create","justifyContent","alignItems","textAlign","textAlignVertical"],"sources":["D:\\University\\Semester 4\\SOftware Studio\\Demo 3\\BeProductive\\node_modules\\react-native-paper\\src\\components\\Avatar\\AvatarText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Text from '../Typography/Text';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = ({\n  label,\n  size = defaultSize,\n  style,\n  labelStyle,\n  color: customColor,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { backgroundColor = theme.colors?.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    customColor ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  const { fontScale } = useWindowDimensions();\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Text\n        style={[\n          styles.text,\n          {\n            color: textColor,\n            fontSize: size / 2,\n            lineHeight: size / fontScale,\n          },\n          labelStyle,\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </Text>\n    </View>\n  );\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default AvatarText;\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,mBAAA;AAAA,OAAAC,IAAA;AAU9B,SAASC,gBAAgB;AACzB,SAASC,KAAK;AAEd,OAAOC,mBAAmB;AAC1B,OAAOC,IAAI;AAEX,IAAMC,WAAW,GAAG,EAAE;AAgDtB,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAGC,IAAA,EAQN;EAAA,IAAAC,aAAA;EAAA,IAPXC,KAAK,GAOCF,IAAA,CAPNE,KAAK;IAAAC,SAAA,GAOCH,IAAA,CANNI,IAAI;IAAJA,IAAI,GAAAD,SAAA,cAAGL,WAAW,GAAAK,SAAA;IAClBE,KAAK,GAKCL,IAAA,CALNK,KAAK;IACLC,UAAU,GAIJN,IAAA,CAJNM,UAAU;IACHC,WAAW,GAGZP,IAAA,CAHNQ,KAAK;IACEC,cAAc,GAEfT,IAAA,CAFNU,KAAK;IACFC,IAAA,GAAAC,wBAAA,CACGZ,IAAA,EAAAa,SAAA;EACN,IAAMH,KAAK,GAAGhB,gBAAgB,CAACe,cAAc,CAAC;EAC9C,IAAAK,KAAA,GACEvB,UAAU,CAACwB,OAAO,CAACV,KAAK,CAAC,IAAI,CAAC,CAAC;IAAAW,qBAAA,GAAAF,KAAA,CADzBG,eAAe;IAAfA,eAAe,GAAAD,qBAAA,eAAAf,aAAA,GAAGS,KAAK,CAACQ,MAAM,cAAAjB,aAAA,uBAAZA,aAAA,CAAckB,OAAO,GAAAH,qBAAA;IAAKI,SAAA,GAAAR,wBAAA,CAAAE,KAAA,EAAAO,UAAA;EAEpD,IAAMC,SAAS,GACbf,WAAW,WAAXA,WAAW,GACXX,mBAAmB,CAACqB,eAAe,EAAEtB,KAAK,EAAE,oBAAoB,CAAC;EACnE,IAAA4B,oBAAA,GAAsB/B,mBAAmB,EAAE;IAAnCgC,SAAA,GAAAD,oBAAA,CAAAC,SAAA;EAER,OACElC,KAAA,CAAAmC,aAAA,CAAChC,IAAI,EAAAiC,QAAA;IACHrB,KAAK,EAAE,CACL;MACEsB,KAAK,EAAEvB,IAAI;MACXwB,MAAM,EAAExB,IAAI;MACZyB,YAAY,EAAEzB,IAAI,GAAG,CAAC;MACtBa,eAAA,EAAAA;IACF,CAAC,EACDa,MAAM,CAACC,SAAS,EAChBX,SAAS;EACT,GACET,IAAI,GAERrB,KAAA,CAAAmC,aAAA,CAAC5B,IAAI;IACHQ,KAAK,EAAE,CACLyB,MAAM,CAACE,IAAI,EACX;MACExB,KAAK,EAAEc,SAAS;MAChBW,QAAQ,EAAE7B,IAAI,GAAG,CAAC;MAClB8B,UAAU,EAAE9B,IAAI,GAAGoB;IACrB,CAAC,EACDlB,UAAU,CACV;IACF6B,aAAa,EAAE;EAAE,GAEhBjC,KAAK,CACD,CACF;AAEX,CAAC;AAEDH,UAAU,CAACqC,WAAW,GAAG,aAAa;AAEtC,IAAMN,MAAM,GAAGvC,UAAU,CAAC8C,MAAM,CAAC;EAC/BN,SAAS,EAAE;IACTO,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDP,IAAI,EAAE;IACJQ,SAAS,EAAE,QAAQ;IACnBC,iBAAiB,EAAE;EACrB;AACF,CAAC,CAAC;AAEF,eAAe1C,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}