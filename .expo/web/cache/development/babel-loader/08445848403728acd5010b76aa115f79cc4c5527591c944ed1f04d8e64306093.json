{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport RadioButton from \"./RadioButton\";\nimport RadioButtonAndroid from \"./RadioButtonAndroid\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport RadioButtonIOS from \"./RadioButtonIOS\";\nimport { handlePress, isChecked } from \"./utils\";\nvar RadioButtonItem = function RadioButtonItem(_ref) {\n  var value = _ref.value,\n    label = _ref.label,\n    style = _ref.style,\n    labelStyle = _ref.labelStyle,\n    _onPress = _ref.onPress,\n    disabled = _ref.disabled,\n    color = _ref.color,\n    uncheckedColor = _ref.uncheckedColor,\n    status = _ref.status,\n    themeOverrides = _ref.theme,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    _ref$labelVariant = _ref.labelVariant,\n    labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant;\n  var theme = useInternalTheme(themeOverrides);\n  var radioButtonProps = {\n    value: value,\n    disabled: disabled,\n    status: status,\n    color: color,\n    uncheckedColor: uncheckedColor\n  };\n  var isLeading = position === 'leading';\n  var radioButton;\n  if (mode === 'android') {\n    radioButton = React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = React.createElement(RadioButton, radioButtonProps);\n  }\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(TouchableRipple, {\n      onPress: function onPress(event) {\n        return handlePress({\n          onPress: _onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value,\n          event: event\n        });\n      },\n      accessibilityLabel: accessibilityLabel,\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        checked: checked,\n        disabled: disabled\n      },\n      testID: testID,\n      disabled: disabled,\n      theme: theme\n    }, React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, React.createElement(Text, {\n      variant: labelVariant,\n      style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default RadioButtonItem;\nexport { RadioButtonItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"names":["React","StyleSheet","View","useInternalTheme","TouchableRipple","Text","RadioButton","RadioButtonAndroid","RadioButtonContext","RadioButtonIOS","handlePress","isChecked","RadioButtonItem","_ref","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","themeOverrides","theme","_ref$accessibilityLab","accessibilityLabel","testID","mode","_ref$position","position","_ref$labelVariant","labelVariant","radioButtonProps","isLeading","radioButton","createElement","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","Consumer","context","checked","contextValue","event","onValueChange","accessibilityRole","accessibilityState","styles","container","pointerEvents","variant","font","displayName","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["C:\\Users\\jmf03\\Desktop\\Software studios\\FINAL PROJECT\\BeProductive\\node_modules\\react-native-paper\\src\\components\\RadioButton\\RadioButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { InternalTheme, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport RadioButton from './RadioButton';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme?: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: themeOverrides,\n  accessibilityLabel = label,\n  testID,\n  mode,\n  position = 'trailing',\n  labelVariant = 'bodyLarge',\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n        return (\n          <TouchableRipple\n            onPress={(event) =>\n              handlePress({\n                onPress: onPress,\n                onValueChange: context?.onValueChange,\n                value,\n                event,\n              })\n            }\n            accessibilityLabel={accessibilityLabel}\n            accessibilityRole=\"radio\"\n            accessibilityState={{\n              checked,\n              disabled,\n            }}\n            testID={testID}\n            disabled={disabled}\n            theme={theme}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                variant={labelVariant}\n                style={[\n                  styles.label,\n                  !theme.isV3 && styles.font,\n                  computedStyle,\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default RadioButtonItem;\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}